; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

	TITLE	c:\Users\latortuga\Desktop\Dev\ShellCodeFromC\src\MessageBox.obj
	.686P
	.XMM
;	include listing.inc
	.model	flat
assume fs:nothing

;INCLUDELIB LIBCMT
;INCLUDELIB OLDNAMES

PUBLIC	_get_module_by_name
PUBLIC	_get_func_by_name
PUBLIC	_main
_DATA	SEGMENT
$SG95250 DB	'k', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	'3', 00H, '2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H
	DB	00H
	ORG $+2
$SG95252 DB	'LoadLibraryA', 00H
	ORG $+3
$SG95254 DB	'GetProcAddress', 00H
	ORG $+1
$SG95256 DB	'ExitThread', 00H
	ORG $+1
$SG95257 DB	'user32.dll', 00H
	ORG $+1
$SG95258 DB	'Shell32.dll', 00H
$SG95259 DB	'MessageBoxA', 00H
$SG95260 DB	'ShellExecuteA', 00H
	ORG $+2
$SG95262 DB	'Demo', 00H
	ORG $+3
$SG95263 DB	'Hello World', 00H
$SG95265 DB	'calc.exe', 00H
	ORG $+3
$SG95266 DB	'open', 00H
_DATA	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
__ExitThread$ = -44					; size = 4
_shell32_dll$ = -40					; size = 4
_u32_dll$ = -36						; size = 4
_exit_thread$ = -32					; size = 4
__ShellExecute$ = -28					; size = 4
__MessageBoxA$ = -24					; size = 4
__GetProcAddress$ = -20					; size = 4
__LoadLibraryA$ = -16					; size = 4
_get_proc$ = -12					; size = 4
_load_lib$ = -8						; size = 4
_base$ = -4						; size = 4
_main	PROC
; File c:\Users\latortuga\Desktop\Dev\ShellCodeFromC\src\MessageBox.c
; Line 4
	push	ebp
	mov	ebp, esp
	sub	esp, 44					; 0000002cH
; Line 6
call SG95250___
 DB	'k', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	'3', 00H, '2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H
	DB	00H
	ORG $+2
SG95250___:
;	push	OFFSET $SG95250
	call	_get_module_by_name
	add	esp, 4
	mov	DWORD PTR _base$[ebp], eax
; Line 7
	cmp	DWORD PTR _base$[ebp], 0
	jne	SHORT $LN2@main
; Line 8
	mov	eax, 1
	jmp	$LN1@main
$LN2@main:
; Line 9
call SG95252___
 DB	'LoadLibraryA', 00H
	ORG $+3
SG95252___:
;	push	OFFSET $SG95252
	mov	eax, DWORD PTR _base$[ebp]
	push	eax
	call	_get_func_by_name
	add	esp, 8
	mov	DWORD PTR _load_lib$[ebp], eax
; Line 10
	cmp	DWORD PTR _load_lib$[ebp], 0
	jne	SHORT $LN3@main
; Line 11
	mov	eax, 1
	jmp	$LN1@main
$LN3@main:
; Line 12
call SG95254___
 DB	'GetProcAddress', 00H
	ORG $+1
SG95254___:
;	push	OFFSET $SG95254
	mov	ecx, DWORD PTR _base$[ebp]
	push	ecx
	call	_get_func_by_name
	add	esp, 8
	mov	DWORD PTR _get_proc$[ebp], eax
; Line 13
	cmp	DWORD PTR _get_proc$[ebp], 0
	jne	SHORT $LN4@main
; Line 14
	mov	eax, 1
	jmp	$LN1@main
$LN4@main:
; Line 15
call SG95256___
 DB	'ExitThread', 00H
	ORG $+1
SG95256___:
;	push	OFFSET $SG95256
	mov	edx, DWORD PTR _base$[ebp]
	push	edx
	call	_get_func_by_name
	add	esp, 8
	mov	DWORD PTR _exit_thread$[ebp], eax
; Line 17
	mov	eax, DWORD PTR _load_lib$[ebp]
	mov	DWORD PTR __LoadLibraryA$[ebp], eax
; Line 18
	mov	ecx, DWORD PTR _exit_thread$[ebp]
	mov	DWORD PTR __ExitThread$[ebp], ecx
; Line 19
	mov	edx, DWORD PTR _get_proc$[ebp]
	mov	DWORD PTR __GetProcAddress$[ebp], edx
; Line 21
call SG95257___
 DB	'user32.dll', 00H
	ORG $+1
SG95257___:
;	push	OFFSET $SG95257
	call	DWORD PTR __LoadLibraryA$[ebp]
	mov	DWORD PTR _u32_dll$[ebp], eax
; Line 22
call SG95258___
 DB	'Shell32.dll', 00H
SG95258___:
;	push	OFFSET $SG95258
	call	DWORD PTR __LoadLibraryA$[ebp]
	mov	DWORD PTR _shell32_dll$[ebp], eax
; Line 27
call SG95259___
 DB	'MessageBoxA', 00H
SG95259___:
;	push	OFFSET $SG95259
	mov	eax, DWORD PTR _u32_dll$[ebp]
	push	eax
	call	DWORD PTR __GetProcAddress$[ebp]
	mov	DWORD PTR __MessageBoxA$[ebp], eax
; Line 30
call SG95260___
 DB	'ShellExecuteA', 00H
	ORG $+2
SG95260___:
;	push	OFFSET $SG95260
	mov	ecx, DWORD PTR _shell32_dll$[ebp]
	push	ecx
	call	DWORD PTR __GetProcAddress$[ebp]
	mov	DWORD PTR __ShellExecute$[ebp], eax
; Line 34
	cmp	DWORD PTR __MessageBoxA$[ebp], 0
	jne	SHORT $LN5@main
	mov	eax, 1
	jmp	 $LN1@main
$LN5@main:
; Line 35
	push	0
call SG95262___
 DB	'Demo', 00H
	ORG $+3
SG95262___:
;	push	OFFSET $SG95262
call SG95263___
 DB	'Hello World', 00H
SG95263___:
;	push	OFFSET $SG95263
	push	0
	call	DWORD PTR __MessageBoxA$[ebp]
; Line 36
	cmp	DWORD PTR __ShellExecute$[ebp], 0
	jne	SHORT $LN6@main
	mov	eax, 1
	jmp	 $LN1@main
$LN6@main:
; Line 37
	push	1
	push	0
	push	0
call SG95265___
 DB	'calc.exe', 00H
	ORG $+3
SG95265___:
;	push	OFFSET $SG95265
call SG95266___
 DB	'open', 00H
SG95266___:
;	push	OFFSET $SG95266
	push	0
	call	DWORD PTR __ShellExecute$[ebp]
; Line 38
	push	0
	call	DWORD PTR __ExitThread$[ebp]
; Line 39
	xor	eax, eax
$LN1@main:
; Line 40
	mov	esp, ebp
	pop	ebp
	ret	0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _get_func_by_name
_TEXT	SEGMENT
_funcRVA$1 = -60					; size = 4
_nameRVA$2 = -56					; size = 4
_nameIndex$3 = -52					; size = 4
_funcsListRVA$ = -48					; size = 4
_namesOrdsListRVA$ = -44				; size = 4
_funcNamesListRVA$ = -40				; size = 4
_namesCount$ = -36					; size = 4
_expAddr$ = -32						; size = 4
_nt_headers$ = -28					; size = 4
_exportsDir$ = -24					; size = 4
_idh$ = -20						; size = 4
_curr_name$4 = -16					; size = 4
_exp$ = -12						; size = 4
_i$5 = -8						; size = 4
_k$6 = -4						; size = 4
_module$ = 8						; size = 4
_func_name$ = 12					; size = 4
_get_func_by_name PROC					; COMDAT
; File c:\Users\latortuga\Desktop\Dev\ShellCodeFromC\src\peb_lookup.h
; Line 105
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
; Line 106
	mov	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _idh$[ebp], eax
; Line 107
	mov	ecx, DWORD PTR _idh$[ebp]
	movzx	edx, WORD PTR [ecx]
	cmp	edx, 23117				; 00005a4dH
	je	SHORT $LN8@get_func_b
; Line 108
	xor	eax, eax
	jmp	$LN1@get_func_b
$LN8@get_func_b:
; Line 110
	mov	eax, DWORD PTR _idh$[ebp]
	mov	ecx, DWORD PTR _module$[ebp]
	add	ecx, DWORD PTR [eax+60]
	mov	DWORD PTR _nt_headers$[ebp], ecx
; Line 111
	mov	edx, 8
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _nt_headers$[ebp]
	lea	edx, DWORD PTR [ecx+eax+120]
	mov	DWORD PTR _exportsDir$[ebp], edx
; Line 112
	mov	eax, DWORD PTR _exportsDir$[ebp]
	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN9@get_func_b
; Line 113
	xor	eax, eax
	jmp	$LN1@get_func_b
$LN9@get_func_b:
; Line 116
	mov	ecx, DWORD PTR _exportsDir$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _expAddr$[ebp], edx
; Line 117
	mov	eax, DWORD PTR _expAddr$[ebp]
	add	eax, DWORD PTR _module$[ebp]
	mov	DWORD PTR _exp$[ebp], eax
; Line 118
	mov	ecx, DWORD PTR _exp$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR _namesCount$[ebp], edx
; Line 120
	mov	eax, DWORD PTR _exp$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	mov	DWORD PTR _funcsListRVA$[ebp], ecx
; Line 121
	mov	edx, DWORD PTR _exp$[ebp]
	mov	eax, DWORD PTR [edx+32]
	mov	DWORD PTR _funcNamesListRVA$[ebp], eax
; Line 122
	mov	ecx, DWORD PTR _exp$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR _namesOrdsListRVA$[ebp], edx
; Line 125
	mov	DWORD PTR _i$5[ebp], 0
	jmp	 $LN4@get_func_b
$LN2@get_func_b:
	mov	eax, DWORD PTR _i$5[ebp]
	add	eax, 1
	mov	DWORD PTR _i$5[ebp], eax
$LN4@get_func_b:
	mov	ecx, DWORD PTR _i$5[ebp]
	cmp	ecx, DWORD PTR _namesCount$[ebp]
	jae	$LN3@get_func_b
; Line 126
	mov	edx, DWORD PTR _module$[ebp]
	add	edx, DWORD PTR _funcNamesListRVA$[ebp]
	mov	eax, DWORD PTR _i$5[ebp]
	lea	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _nameRVA$2[ebp], ecx
; Line 127
	mov	edx, DWORD PTR _module$[ebp]
	add	edx, DWORD PTR _namesOrdsListRVA$[ebp]
	mov	eax, DWORD PTR _i$5[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _nameIndex$3[ebp], ecx
; Line 128
	mov	edx, DWORD PTR _module$[ebp]
	add	edx, DWORD PTR _funcsListRVA$[ebp]
	mov	eax, DWORD PTR _nameIndex$3[ebp]
	movzx	ecx, WORD PTR [eax]
	lea	edx, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _funcRVA$1[ebp], edx
; Line 130
	mov	eax, DWORD PTR _nameRVA$2[ebp]
	mov	ecx, DWORD PTR _module$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	DWORD PTR _curr_name$4[ebp], ecx
; Line 131
	mov	DWORD PTR _k$6[ebp], 0
; Line 132
	mov	DWORD PTR _k$6[ebp], 0
	jmp	 $LN7@get_func_b
$LN5@get_func_b:
	mov	edx, DWORD PTR _k$6[ebp]
	add	edx, 1
	mov	DWORD PTR _k$6[ebp], edx
$LN7@get_func_b:
	mov	eax, DWORD PTR _func_name$[ebp]
	add	eax, DWORD PTR _k$6[ebp]
	movsx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN6@get_func_b
	mov	edx, DWORD PTR _curr_name$4[ebp]
	add	edx, DWORD PTR _k$6[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN6@get_func_b
; Line 133
	mov	ecx, DWORD PTR _func_name$[ebp]
	add	ecx, DWORD PTR _k$6[ebp]
	movsx	edx, BYTE PTR [ecx]
	mov	eax, DWORD PTR _curr_name$4[ebp]
	add	eax, DWORD PTR _k$6[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	edx, ecx
	je	SHORT $LN10@get_func_b
	jmp	 $LN6@get_func_b
$LN10@get_func_b:
; Line 134
	jmp	 $LN5@get_func_b
$LN6@get_func_b:
; Line 135
	mov	edx, DWORD PTR _func_name$[ebp]
	add	edx, DWORD PTR _k$6[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN11@get_func_b
	mov	ecx, DWORD PTR _curr_name$4[ebp]
	add	ecx, DWORD PTR _k$6[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	jne	SHORT $LN11@get_func_b
; Line 137
	mov	eax, DWORD PTR _funcRVA$1[ebp]
	mov	ecx, DWORD PTR _module$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	eax, ecx
	jmp	 $LN1@get_func_b
$LN11@get_func_b:
; Line 139
	jmp	$LN2@get_func_b
$LN3@get_func_b:
; Line 140
	xor	eax, eax
$LN1@get_func_b:
; Line 141
	mov	esp, ebp
	pop	ebp
	ret	0
_get_func_by_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _get_module_by_name
_TEXT	SEGMENT
_list$ = -56						; size = 8
_Flink$ = -48						; size = 4
_ldr$ = -44						; size = 4
tv158 = -40						; size = 4
tv152 = -36						; size = 4
tv136 = -32						; size = 4
tv130 = -28						; size = 4
_peb$ = -24						; size = 4
_curr_module$ = -20					; size = 4
_curr_name$1 = -16					; size = 4
_i$2 = -12						; size = 4
_c2$3 = -8						; size = 2
_c1$4 = -4						; size = 2
_module_name$ = 8					; size = 4
_get_module_by_name PROC				; COMDAT
; File c:\Users\latortuga\Desktop\Dev\ShellCodeFromC\src\peb_lookup.h
; Line 69
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
; Line 70
	mov	DWORD PTR _peb$[ebp], 0
; Line 74
	mov	eax, DWORD PTR fs:48
	mov	DWORD PTR _peb$[ebp], eax
; Line 76
	mov	ecx, DWORD PTR _peb$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR _ldr$[ebp], edx
; Line 77
	mov	eax, DWORD PTR _ldr$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR [eax+16]
	mov	DWORD PTR _list$[ebp], ecx
	mov	DWORD PTR _list$[ebp+4], edx
; Line 79
	mov	eax, DWORD PTR _list$[ebp]
	mov	DWORD PTR _Flink$[ebp], eax
; Line 80
	mov	ecx, DWORD PTR _Flink$[ebp]
	mov	DWORD PTR _curr_module$[ebp], ecx
$LN2@get_module:
; Line 82
	cmp	DWORD PTR _curr_module$[ebp], 0
	je	$LN3@get_module
	mov	edx, DWORD PTR _curr_module$[ebp]
	cmp	DWORD PTR [edx+24], 0
	je	$LN3@get_module
; Line 83
	mov	eax, DWORD PTR _curr_module$[ebp]
	cmp	DWORD PTR [eax+48], 0
	je	$LN7@get_module
; Line 84
	mov	ecx, DWORD PTR _curr_module$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR _curr_name$1[ebp], edx
; Line 86
	mov	DWORD PTR _i$2[ebp], 0
; Line 87
	mov	DWORD PTR _i$2[ebp], 0
	jmp	 $LN6@get_module
$LN4@get_module:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN6@get_module:
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _module_name$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	test	eax, eax
	je	$LN5@get_module
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _curr_name$1[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	test	eax, eax
	je	$LN5@get_module
; Line 89
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _module_name$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN11@get_module
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _module_name$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN11@get_module
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _module_name$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	add	eax, 32					; 00000020H
	mov	DWORD PTR tv130[ebp], eax
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _module_name$[ebp]
	mov	ax, WORD PTR tv130[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	movzx	ecx, WORD PTR tv130[ebp]
	mov	DWORD PTR tv136[ebp], ecx
	jmp	 $LN12@get_module
$LN11@get_module:
	mov	edx, DWORD PTR _i$2[ebp]
	mov	eax, DWORD PTR _module_name$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2]
	mov	DWORD PTR tv136[ebp], ecx
$LN12@get_module:
	mov	dx, WORD PTR tv136[ebp]
	mov	WORD PTR _c1$4[ebp], dx
; Line 90
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _curr_name$1[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 90					; 0000005aH
	jg	SHORT $LN13@get_module
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _curr_name$1[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	cmp	edx, 65					; 00000041H
	jl	SHORT $LN13@get_module
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _curr_name$1[ebp]
	movzx	edx, WORD PTR [ecx+eax*2]
	add	edx, 32					; 00000020H
	mov	DWORD PTR tv152[ebp], edx
	mov	eax, DWORD PTR _i$2[ebp]
	mov	ecx, DWORD PTR _curr_name$1[ebp]
	mov	dx, WORD PTR tv152[ebp]
	mov	WORD PTR [ecx+eax*2], dx
	movzx	eax, WORD PTR tv152[ebp]
	mov	DWORD PTR tv158[ebp], eax
	jmp	 $LN14@get_module
$LN13@get_module:
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _curr_name$1[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	mov	DWORD PTR tv158[ebp], eax
$LN14@get_module:
	mov	cx, WORD PTR tv158[ebp]
	mov	WORD PTR _c2$3[ebp], cx
; Line 91
	movzx	edx, WORD PTR _c1$4[ebp]
	movzx	eax, WORD PTR _c2$3[ebp]
	cmp	edx, eax
	je	SHORT $LN8@get_module
	jmp	 $LN5@get_module
$LN8@get_module:
; Line 92
	jmp	$LN4@get_module
$LN5@get_module:
; Line 93
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _module_name$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	test	eax, eax
	jne	SHORT $LN7@get_module
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _curr_name$1[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	test	eax, eax
	jne	SHORT $LN7@get_module
; Line 95
	mov	ecx, DWORD PTR _curr_module$[ebp]
	mov	eax, DWORD PTR [ecx+24]
	jmp	 $LN1@get_module
$LN7@get_module:
; Line 99
	mov	edx, DWORD PTR _curr_module$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _curr_module$[ebp], eax
; Line 100
	jmp	$LN2@get_module
$LN3@get_module:
; Line 101
	xor	eax, eax
$LN1@get_module:
; Line 102
	mov	esp, ebp
	pop	ebp
	ret	0
_get_module_by_name ENDP
_TEXT	ENDS
END
